image: registry.gitlab.com/josm/docker-library/openjdk:8

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

include:
  - template: Code-Quality.gitlab-ci.yml
code_quality:
  artifacts:
    paths: [ gl-code-quality-report.json ]
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

assemble:
  stage: build
  script: ./gradlew assemble generatePot
  artifacts:
    paths:
      - build/
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

minJosm:
  stage: build
  script: ./gradlew compileJava_minJosm
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

latestJosm:
  stage: build
  script: ./gradlew compileJava_latestJosm
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

javadoc:
  stage: build
  script: ./gradlew javadoc
  artifacts:
    paths:
      - build/docs/javadoc/
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

build:
  stage: test
  script: ./gradlew test jacocoTestReport spotbugsMain pmdMain
  artifacts:
    reports:
      junit:
        - build/test-results/**/TEST-*.xml
      metrics:
        - build/metrics/task/pmdMain.txt
        - build/metrics/task/spotbugsMain.txt
    paths:
      - build/reports/jacoco/test/jacocoTestReport.xml
    when: always
  needs:
    - assemble
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

# See https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html
coverage:
  stage: deploy
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, use relative project path
    - 'python /opt/cover2cover.py build/reports/jacoco/test/jacocoTestReport.xml src/main/java > build/cobertura.xml'
    # read the <source></source> tag and prepend the path to every filename attribute
    - 'python /opt/source2filename.py build/cobertura.xml'
  needs:
    - build
  artifacts:
    reports:
      cobertura: build/cobertura.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

transifex:
  image: registry.gitlab.com/josm/docker-library/python-transifex:latest
  stage: deploy
  environment:
    name: transifex
    url: https://www.transifex.com/josm/josm/josm-plugin_RovasConnector/
  script:
    - TX_TOKEN="$TRANSIFEX_TOKEN" tx push -s --no-interactive
  needs:
    - assemble
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "master" && $CI_PROJECT_PATH == "JOSM/plugin/RovasConnector"'

pages:
  stage: deploy
  environment:
    name: pages
    url: https://josm.gitlab.io/plugin/RovasConnector/
  script:
    - mkdir -p public/dist/
    - cp build/dist/RovasConnector.jar public/dist/
    - cp -r build/docs/javadoc/ public/
  artifacts:
    paths:
      - public
  needs:
    - assemble
    - javadoc
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_TAG != null'
